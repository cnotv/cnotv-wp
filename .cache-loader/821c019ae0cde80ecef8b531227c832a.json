{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/buble-loader/index.js??ref--2-1!/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/eslint-loader/index.js!/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/import-glob/index.js!/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/resources/assets/scripts/util/Router.js","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/resources/assets/scripts/util/Router.js","mtime":1505221472000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/buble-loader/index.js","mtime":1487914911000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/eslint-loader/index.js","mtime":1499322156000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/node_modules/import-glob/index.js","mtime":1475481585000}],"contextDependencies":[],"result":["import camelCase from './camelCase';\n\n/**\n * DOM-based Routing\n *\n * Based on {@link http://goo.gl/EUTi53|Markup-based Unobtrusive Comprehensive DOM-ready Execution} by Paul Irish\n *\n * The routing fires all common scripts, followed by the page specific scripts.\n * Add additional events for more control over timing e.g. a finalize event\n */\nvar Router = function Router(routes) {\n  this.routes = routes;\n};\n\n/**\n * Fire Router events\n * @param {string} route DOM-based route derived from body classes (`<body class=\"...\">`)\n * @param {string} [event] Events on the route. By default, `init` and `finalize` events are called.\n * @param {string} [arg] Any custom argument to be passed to the event.\n */\nRouter.prototype.fire = function fire (route, event, arg) {\n    if ( event === void 0 ) event = 'init';\n\n  var fire = route !== '' && this.routes[route] && typeof this.routes[route][event] === 'function';\n  if (fire) {\n    this.routes[route][event](arg);\n  }\n};\n\n/**\n * Automatically load and fire Router events\n *\n * Events are fired in the following order:\n ** common init\n ** page-specific init\n ** page-specific finalize\n ** common finalize\n */\nRouter.prototype.loadEvents = function loadEvents () {\n    var this$1 = this;\n\n  // Fire common init JS\n  this.fire('common');\n\n  // Fire page-specific init JS, and then finalize JS\n  document.body.className\n    .toLowerCase()\n    .replace(/-/g, '_')\n    .split(/\\s+/)\n    .map(camelCase)\n    .forEach(function (className) {\n      this$1.fire(className);\n      this$1.fire(className, 'finalize');\n    });\n\n  // Fire common finalize JS\n  this.fire('common', 'finalize');\n};\n\nexport default Router\n",{"version":3,"file":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp/resources/assets/scripts/util/Router.js","sources":["resources/assets/scripts/util/Router.js"],"sourcesContent":["import camelCase from './camelCase';\n\n/**\n * DOM-based Routing\n *\n * Based on {@link http://goo.gl/EUTi53|Markup-based Unobtrusive Comprehensive DOM-ready Execution} by Paul Irish\n *\n * The routing fires all common scripts, followed by the page specific scripts.\n * Add additional events for more control over timing e.g. a finalize event\n */\nclass Router {\n\n  /**\n   * Create a new Router\n   * @param {Object} routes\n   */\n  constructor(routes) {\n    this.routes = routes;\n  }\n\n  /**\n   * Fire Router events\n   * @param {string} route DOM-based route derived from body classes (`<body class=\"...\">`)\n   * @param {string} [event] Events on the route. By default, `init` and `finalize` events are called.\n   * @param {string} [arg] Any custom argument to be passed to the event.\n   */\n  fire(route, event = 'init', arg) {\n    const fire = route !== '' && this.routes[route] && typeof this.routes[route][event] === 'function';\n    if (fire) {\n      this.routes[route][event](arg);\n    }\n  }\n\n  /**\n   * Automatically load and fire Router events\n   *\n   * Events are fired in the following order:\n   *  * common init\n   *  * page-specific init\n   *  * page-specific finalize\n   *  * common finalize\n   */\n  loadEvents() {\n    // Fire common init JS\n    this.fire('common');\n\n    // Fire page-specific init JS, and then finalize JS\n    document.body.className\n      .toLowerCase()\n      .replace(/-/g, '_')\n      .split(/\\s+/)\n      .map(camelCase)\n      .forEach((className) => {\n        this.fire(className);\n        this.fire(className, 'finalize');\n      });\n\n    // Fire common finalize JS\n    this.fire('common', 'finalize');\n  }\n}\n\nexport default Router\n"],"names":["const","this"],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;;;;;;;;;;AAUpC,IAAM,MAAM,GAAC,AAEb,AAAE,AACD,AAAE,AACF,AAAE,AACF,AAAE,AACH,AAAE,eAAW,CAAC,MAAM,EAAE;EACpB,AAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB,AAAE,CAAC,CAAA;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,AAAE,iBAAA,IAAI,iBAAA,CAAC,KAAK,EAAE,KAAc,EAAE,GAAG,EAAE,CAAhB;iCAAA,GAAG,MAAM;AAAQ;EAClC,AAAEA,GAAK,CAAC,IAAI,GAAG,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,UAAU,CAAC;EACrG,AAAE,IAAI,IAAI,EAAE;IACV,AAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;EACnC,AAAE,CAAC;AACL,AAAE,CAAC,CAAA;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE,CAAC,AAAE;CACL,AAAE,CAAC,AAAE;CACL,AAAE,CAAC,AAAE;CACL,AAAE,CAAC,AAAE;CACL,AAAE;AACH,AAAE,iBAAA,UAAU,uBAAA,GAAG,CAAC;;AAAA;EACd,AAAE;EACF,AAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;EAEtB,AAAE;EACF,AAAE,QAAQ,CAAC,IAAI,CAAC,SAAS;IACvB,AAAE,CAAC,WAAW,EAAE;IAChB,AAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IACrB,AAAE,CAAC,KAAK,CAAC,KAAK,CAAC;IACf,AAAE,CAAC,GAAG,CAAC,SAAS,CAAC;IACjB,AAAE,CAAC,OAAO,CAAC,SAAA,CAAC,SAAS,EAAE,AAAG;MACxB,AAAEC,MAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;MACvB,AAAEA,MAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACrC,AAAE,CAAC,CAAC,CAAC;;EAEP,AAAE;EACF,AAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACpC,AAAE,CAAC,CAAA,AACF;;AAED,eAAe,MAAM;","sourceRoot":"/Applications/XAMPP/xamppfiles/htdocs/wp_mvc/wp-content/themes/cnotv-wp"}]}